<channel version="3.0.1">
  <id>fdd39025-12ee-4398-9d81-a80470181582</id>
  <nextMetaDataId>11</nextMetaDataId>
  <name>Census Events</name>
  <description>This channel will attempt to read the submissions from ODK in order, according to the form&apos;s collectionDateTime field.&#xd;
&#xd;
As of 14 May 2014, it only expects Individual forms.&#xd;
&#xd;
</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1400177015125</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>4</revision>
  <sourceConnector version="3.0.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.0.1">
      <pollConnectorProperties version="3.0.1">
        <pollingType>interval</pollingType>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <pollingFrequency>3000</pollingFrequency>
      </pollConnectorProperties>
      <responseConnectorProperties version="3.0.1">
        <responseVariable>None</responseVariable>
        <defaultQueueOnResponses>
          <string>None</string>
          <string>Auto-generate (Before processing)</string>
        </defaultQueueOnResponses>
        <defaultQueueOffResponses>
          <string>None</string>
          <string>Auto-generate (Before processing)</string>
          <string>Auto-generate (After source transformer)</string>
          <string>Auto-generate (Destinations completed)</string>
          <string>Postprocessor</string>
        </defaultQueueOffResponses>
        <respondAfterProcessing>true</respondAfterProcessing>
      </responseConnectorProperties>
      <script>var newForms = new java.util.ArrayList()
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;), globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));

// emit new individuals
var individualResult = dbConn.executeCachedQuery(&quot;SELECT &quot;+ globalMap.get(&quot;INDIVIDUAL_COLUMNS&quot;) +&quot; FROM &quot; + globalMap.get(&quot;INDIVIDUAL_TABLE&quot;) + &quot; WHERE processed_by_mirth IS NULL ORDER BY COLLECTION_DATE_TIME&quot;);
while (individualResult.next()) {
  // create the individual herself
  var individualXML = resultSetToXml(individualResult, &quot;&lt;individual event=&apos;individual&apos; table-name=&apos;&quot; + globalMap.get(&quot;INDIVIDUAL_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  newForms.add(individualXML.toString());

  // TODO: create individual membership, relationship, residence
}

dbConn.close();
return newForms;</script>
    </properties>
    <transformer version="3.0.1">
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.0.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.0.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.0.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.0.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.0.1">
      <rules/>
    </filter>
    <transportName>JavaScript Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.0.1">
      <metaDataId>1</metaDataId>
      <name>Individual</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.0.1">
        <queueConnectorProperties version="3.0.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <threadCount>1</threadCount>
        </queueConnectorProperties>
        <host>http://localhost:8080/openhds/api/rest/individual</host>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <includeHeadersInResponse>false</includeHeadersInResponse>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <username>admin</username>
        <password>test</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.0.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>extId (out)</name>
            <script>tmp[&apos;individual_ext_id&apos;] = validate(msg[&apos;individual_ext_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual_ext_id&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_ext_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;field_worker_ext_id&apos;] = validate(msg[&apos;field_worker_ext_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;field_worker_ext_id&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_ext_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGluZGl2aWR1YWwgZXZlbnQ9ImluZGl2aWR1YWwiIHRhYmxlLW5hbWU9ImluZGl2aWR1YWxfY29y
ZSI+CiAgPF91cmk+PC9fdXJpPgogIDxpbmRpdmlkdWFsX2dlbmRlcj48L2luZGl2aWR1YWxfZ2Vu
ZGVyPgogIDxpbmRpdmlkdWFsX2FnZV91bml0cz48L2luZGl2aWR1YWxfYWdlX3VuaXRzPgogIDxp
bmRpdmlkdWFsX3Bob25lX251bWJlciAgPjwvaW5kaXZpZHVhbF9waG9uZV9udW1iZXI+CiAgPGhv
dXNlaG9sZF9leHRfaWQgPjwvaG91c2Vob2xkX2V4dF9pZD4KICA8aW5kaXZpZHVhbF9hZ2UgPjwv
aW5kaXZpZHVhbF9hZ2U+CiAgPGluZGl2aWR1YWxfZGlwPjwvaW5kaXZpZHVhbF9kaXA+CiAgPGlu
ZGl2aWR1YWxfcG9pbnRfb2ZfY29udGFjdF9waG9uZV9udW1iZXIgPjwvaW5kaXZpZHVhbF9wb2lu
dF9vZl9jb250YWN0X3Bob25lX251bWJlcj4KICA8aW5kaXZpZHVhbF9yZWxhdGlvbnNoaXBfdG9f
aGVhZF9vZl9ob3VzZWhvbGQgPjwvaW5kaXZpZHVhbF9yZWxhdGlvbnNoaXBfdG9faGVhZF9vZl9o
b3VzZWhvbGQ+CiAgPGluZGl2aWR1YWxfbGFuZ3VhZ2VfcHJlZmVyZW5jZSA+PC9pbmRpdmlkdWFs
X2xhbmd1YWdlX3ByZWZlcmVuY2U+CiAgPGluZGl2aWR1YWxfbWVtYmVyX3N0YXR1cyA+PC9pbmRp
dmlkdWFsX21lbWJlcl9zdGF0dXM+CiAgPGluZGl2aWR1YWxfZmlyc3RfbmFtZSA+PC9pbmRpdmlk
dWFsX2ZpcnN0X25hbWU+CiAgPGluZGl2aWR1YWxfb3RoZXJfbmFtZXMgPjwvaW5kaXZpZHVhbF9v
dGhlcl9uYW1lcz4KICA8Y29sbGVjdGlvbl9kYXRlX3RpbWUgPjwvY29sbGVjdGlvbl9kYXRlX3Rp
bWU+CiAgPGluZGl2aWR1YWxfcG9pbnRfb2ZfY29udGFjdF9uYW1lID48L2luZGl2aWR1YWxfcG9p
bnRfb2ZfY29udGFjdF9uYW1lPgogIDxpbmRpdmlkdWFsX2xhc3RfbmFtZSA+PC9pbmRpdmlkdWFs
X2xhc3RfbmFtZT4KICA8aW5kaXZpZHVhbF9vdGhlcl9waG9uZV9udW1iZXIgPjwvaW5kaXZpZHVh
bF9vdGhlcl9waG9uZV9udW1iZXI+CiAgPGluZGl2aWR1YWxfZXh0X2lkID48L2luZGl2aWR1YWxf
ZXh0X2lkPgogIDxpbmRpdmlkdWFsX2RhdGVfb2ZfYmlydGg+PC9pbmRpdmlkdWFsX2RhdGVfb2Zf
YmlydGg+CiAgPHByb2Nlc3NlZF9ieV9taXJ0aCA+PC9wcm9jZXNzZWRfYnlfbWlydGg+CiAgPGZp
ZWxkX3dvcmtlcl9leHRfaWQgPjwvZmllbGRfd29ya2VyX2V4dF9pZD4KPC9pbmRpdmlkdWFsPg==
</inboundTemplate>
        <outboundTemplate encoding="base64">PGluZGl2aWR1YWw+CiAgPF91cmk+PC9fdXJpPgogIDxpbmRpdmlkdWFsX2dlbmRlcj48L2luZGl2
aWR1YWxfZ2VuZGVyPgogIDxpbmRpdmlkdWFsX2FnZV91bml0cz48L2luZGl2aWR1YWxfYWdlX3Vu
aXRzPgogIDxpbmRpdmlkdWFsX3Bob25lX251bWJlciAgPjwvaW5kaXZpZHVhbF9waG9uZV9udW1i
ZXI+CiAgPGhvdXNlaG9sZF9leHRfaWQgPjwvaG91c2Vob2xkX2V4dF9pZD4KICA8aW5kaXZpZHVh
bF9hZ2UgPjwvaW5kaXZpZHVhbF9hZ2U+CiAgPGluZGl2aWR1YWxfZGlwPjwvaW5kaXZpZHVhbF9k
aXA+CiAgPGluZGl2aWR1YWxfcG9pbnRfb2ZfY29udGFjdF9waG9uZV9udW1iZXIgPjwvaW5kaXZp
ZHVhbF9wb2ludF9vZl9jb250YWN0X3Bob25lX251bWJlcj4KICA8aW5kaXZpZHVhbF9yZWxhdGlv
bnNoaXBfdG9faGVhZF9vZl9ob3VzZWhvbGQgPjwvaW5kaXZpZHVhbF9yZWxhdGlvbnNoaXBfdG9f
aGVhZF9vZl9ob3VzZWhvbGQ+CiAgPGluZGl2aWR1YWxfbGFuZ3VhZ2VfcHJlZmVyZW5jZSA+PC9p
bmRpdmlkdWFsX2xhbmd1YWdlX3ByZWZlcmVuY2U+CiAgPGluZGl2aWR1YWxfbWVtYmVyX3N0YXR1
cyA+PC9pbmRpdmlkdWFsX21lbWJlcl9zdGF0dXM+CiAgPGluZGl2aWR1YWxfZmlyc3RfbmFtZSA+
PC9pbmRpdmlkdWFsX2ZpcnN0X25hbWU+CiAgPGluZGl2aWR1YWxfb3RoZXJfbmFtZXMgPjwvaW5k
aXZpZHVhbF9vdGhlcl9uYW1lcz4KICA8Y29sbGVjdGlvbl9kYXRlX3RpbWUgPjwvY29sbGVjdGlv
bl9kYXRlX3RpbWU+CiAgPGluZGl2aWR1YWxfcG9pbnRfb2ZfY29udGFjdF9uYW1lID48L2luZGl2
aWR1YWxfcG9pbnRfb2ZfY29udGFjdF9uYW1lPgogIDxpbmRpdmlkdWFsX2xhc3RfbmFtZSA+PC9p
bmRpdmlkdWFsX2xhc3RfbmFtZT4KICA8aW5kaXZpZHVhbF9vdGhlcl9waG9uZV9udW1iZXIgPjwv
aW5kaXZpZHVhbF9vdGhlcl9waG9uZV9udW1iZXI+CiAgPGluZGl2aWR1YWxfZXh0X2lkID48L2lu
ZGl2aWR1YWxfZXh0X2lkPgogIDxpbmRpdmlkdWFsX2RhdGVfb2ZfYmlydGg+PC9pbmRpdmlkdWFs
X2RhdGVfb2ZfYmlydGg+CiAgPHByb2Nlc3NlZF9ieV9taXJ0aCA+PC9wcm9jZXNzZWRfYnlfbWly
dGg+CiAgPGZpZWxkX3dvcmtlcl9leHRfaWQgPjwvZmllbGRfd29ya2VyX2V4dF9pZD4KPC9pbmRp
dmlkdWFsPg==</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.0.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.0.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.0.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.0.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.0.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.0.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.0.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.0.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.0.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.0.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;individual&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;individual&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed

// update the database record to mark it as being processed by mirth
markRecordAsProcessed(messageObject.getRawData());

return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
  <properties version="3.0.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties>
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
  </properties>
</channel>