<map>
  <entry>
    <string>Undeploy</string>
    <string>// This script executes once when all channels shut down from a redeploy
// You only have access to the globalMap here to persist data
return;</string>
  </entry>
  <entry>
    <string>Postprocessor</string>
    <string>// This script executes once after a message has been processed
// This script applies across all channels
return;</string>
  </entry>
  <entry>
    <string>Deploy</string>
    <string>// This script executes once when all channels start up from a redeploy&#xd;
// You only have access to the globalMap here to persist data&#xd;

// odk credentials&#xd;
globalMap.put(&apos;ODK_DATABASE_URL&apos;,&apos;jdbc:mysql://localhost/odk_prod&apos;);&#xd;
globalMap.put(&apos;ODK_DATABASE_USER&apos;,&apos;mirth_odk&apos;);&#xd;
globalMap.put(&apos;ODK_DATABASE_PASSWORD&apos;,&apos;g0m1rthg0!&apos;);&#xd;
&#xd;
// openhds credentials&#xd;
globalMap.put(&apos;OPENHDS_PATH&apos;,&apos;localhost:8080/openhds&apos;);&#xd;
globalMap.put(&apos;OPENHDS_USER&apos;,&apos;openhds&apos;);&#xd;
globalMap.put(&apos;OPENHDS_PASSWORD&apos;,&apos;openhds&apos;);&#xd;
&#xd;
// sequence of odk tables that Mirth should query&#xd;
globalMap.put(&apos;ODK_TABLE_SEQUENCE&apos;, [
				&apos;LOCATION_CORE&apos;,
				&apos;DUPLICATE_LOCATION_CORE&apos;,
				&apos;SPRAYING_CORE&apos;,
				&apos;INDIVIDUAL_CORE&apos;,
			 	&apos;VISIT_CORE&apos;,
				&apos;PREGNANCY_OBSERVATION_CORE&apos;, 
				&apos;PREGNANCY_OUTCOME_CORE&apos;,
				&apos;PREGNANCY_OUTCOME_OUTCOMES&apos;, 
				&apos;OUT_MIGRATION_CORE&apos;, 
				&apos;IN_MIGRATION_CORE&apos;, 
				&apos;DEATH_CORE&apos;])&#xd;
&#xd;

globalMap.put(&apos;ODK_TABLE_METADATA&apos;, {
   &apos;LOCATION_CORE&apos;: {
      &apos;event&apos;: &apos;locationForm&apos;,
      &apos;alias&apos;: {
         &apos;location_lat&apos;: &apos;latitude&apos;,
         &apos;location_lng&apos;: &apos;longitude&apos;,
         &apos;location_alt&apos;: &apos;altitude&apos;,
         &apos;location_acc&apos;: &apos;accuracy&apos;
      }
   },
   &apos;DUPLICATE_LOCATION_CORE&apos;: {
   	 &apos;event&apos;: &apos;duplicateLocationForm&apos;
   },
   &apos;SPRAYING_CORE&apos;: {
   	 &apos;event&apos;: &apos;sprayingForm&apos;
   },
   &apos;INDIVIDUAL_CORE&apos;: {
      &apos;event&apos;: &apos;individualForm&apos;
   },
   &apos;VISIT_CORE&apos;: {
      &apos;event&apos;: &apos;visitForm&apos;
   },
   &apos;PREGNANCY_OBSERVATION_CORE&apos;: {
      &apos;event&apos;: &apos;pregnancyObservationForm&apos;
   },
   &apos;PREGNANCY_OUTCOME_CORE&apos;: {
      &apos;event&apos;: &apos;pregnancyOutcomeCoreForm&apos;
   },
   &apos;PREGNANCY_OUTCOME_OUTCOMES&apos;: {
      &apos;event&apos;: &apos;pregnancyOutcomeOutcomesForm&apos;
   },
   &apos;OUT_MIGRATION_CORE&apos;: {
      &apos;event&apos;: &apos;outMigrationForm&apos;
   },
   &apos;IN_MIGRATION_CORE&apos;: {
      &apos;event&apos;: &apos;inMigrationForm&apos;
   },
   &apos;DEATH_CORE&apos;: {
      &apos;event&apos;: &apos;deathForm&apos;
   }
});

// how many ODK forms Mirth should try to process at a time
globalMap.put(&apos;ODK_FORM_LIMIT&apos;, &apos;300&apos;);

return;</string>
  </entry>
  <entry>
    <string>Preprocessor</string>
    <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
  </entry>
</map>